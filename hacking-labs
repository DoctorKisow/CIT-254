#!/bin/bash
#
# hacking-labs - A script used to change the TCP/IP addresses in the CIT-254 lab enviornment for my CIT-254 Ethical Hacking classes.
# Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved.
# Dr. Matthew Kisow <mkisow@ccac.edu>

# License (CC-BY-ND)
# ------------------
#
# This work is licensed under the Creative Commons Attribution-NoDerivatives
# 4.0 International License. To view a copy of this license, visit
# http://creativecommons.org/licenses/by-nd/4.0/ or send a letter to Creative
# Commons, PO Box 1866, Mountain View, CA 94042, USA.

# Scroll to the bottom of this script to follow the main script flow.

# ##############################################################################
# CIT-254 Ethical Hacking Lab Enviornment
# Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved.
#
# The usage of Metasploit and the Metasploitable framework is governed by the copyrights held by Rapid7.
#
# Microsoft Server is a copyrighted product of Microsoft Corporation. All rights reserved.
#
#
#  CIT-254 Lab vAPP
#  ├─Kali (2023.4)
#  ├─metasploitable2 (Ubuntu 08.04)
#  ├─metasploitable3 (Ubuntu 14.04)
#  ├─metasploitable3 (Windows 2008R2)
#
#  Kali (2023.4)
#  - hostname: comptia
#  - eth0:     dhcp
#  - eth1:     192.168.1.1/29
#  - admin:    mkisowa/Ch354vk!0010
#  - labuser:  labuser/P@$$w0rd!
#
#  metasploitable3 (Windows 2008R2)
#  - hostname: vagrant-2008R2
#  - eth0:     192.168.1.2/29
#  - user:     vagrant/vagrant
#              administrator/vagrant
#
#  metasploitable3 (Ubuntu 14.04)
#  - hostname: ubuntu
#  - eth0:     192.168.1.3/29
#  - user:     vagrant/vagrant
#
#  metasploitable2 (Ubuntu 08.04)
#  - hostname: metasploitable
#  - eth0:     192.168.1.4/29
#  - user:     msfadmin/msfadmin
# ##############################################################################


## Set how the script will behave when certain conditions are encountered.
# Disable exiting immediately if a command exits with a non-zero status.
set +e

# Enable erroring on un-bound (undefined) variables.
set -u

# Enable filename patterns that match no files to expand to a null string, rather than themselves.
shopt -s nullglob

# ************************* global variable definitions ************************
g_PROGNAME="$(basename "${0}")"
g_VERSION="0.0.24"
g_PROGRAM_NAME="hacking-labs"
g_PROGRAM_DESCRIPTION="A script used to change the TCP/IP addresses of the isolated machines in the CIT-254 lab enviornment."
g_SCRIPT_URL="https://github.com/DoctorKisow/CIT-254/raw/main/hacking-labs"
g_COPYRIGHT_TEXT="Copyright (c) 2022-2024 Dr. Matthew Kisow. All rights reserved."
g_AUTHOR_TEXT="Dr. Matthew Kisow"
g_AUTHOR_EMAIL="mkisow@ccac.edu"

# Script location where it was run from.
g_SCRIPT_LOCATION="${BASH_SOURCE[@]}"

# (g_<color>_TEXT) - Variables used to control how output is displayed to the screen during script execution.
g_RED_TEXT="" g_GREEN_TEXT="" g_YELLOW_TEXT="" g_BLUE_TEXT="" g_MAGENTA_TEXT="" g_CYAN_TEXT="" g_WHITE_TEXT="" g_RESET_ATTS=""  g_ALERT_TEXT=""
if [[ -v TERM && -n "${TERM}" && "${TERM}" != "dumb" ]]; then
  g_RD_TEXT="$(tput setaf 1)$(tput bold)"
  g_GREEN_TEXT="$(tput setaf 2)$(tput bold)"
  g_YELLOW_TEXT="$(tput setaf 3)$(tput bold)"
  g_BLUE_TEXT="$(tput setaf 4)$(tput bold)"
  g_MAGENTA_TEXT="$(tput setaf 5)$(tput bold)"
  g_CYAN_TEXT="$(tput setaf 6)$(tput bold)"
  g_WHITE_TEXT="$(tput setaf 7)$(tput bold)"
  g_RESET_ATTS="$(tput sgr0)"
  g_ALERT_TEXT="$(tput bel)"
fi

# (g_PREFIXSTRING) - String value used to indicate what is appended to the output at the beginning of screen output during script execution.
g_PREFIXSTRING="*  "

# (g_SHOWPREFIX) - String value used to indicate normal script execution.
g_SHOWPREFIX="${g_GREEN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}"

# (g_SCRIPT_PATH) - String value used to hold the execution path of the script.
g_SCRIPT_PATH="`dirname \"$0\"`"
g_SCRIPT_PATH="`( cd \"$g_SCRIPT_PATH\" && pwd )`"

# (g_ARG_<variable>) - Boolean values used to indicate which command line options are set during execution; the default for all values is 0.
# WARNING: DO NOT MODIFY THESE VALUE(S)!
declare -i g_ARG_FINISH_INSTALL=0
declare -i g_ARG_SETIP=0
declare -i g_ARG_UPDATE=0

# Lab enviornment default IP addresses. DO NOT MODIFY!
declare g_KALI_DEFIP="192.168.1.1"
declare g_WIN2K8_DEFIP="192.168.1.2"
declare g_LIN1404_DEFIP="192.168.1.3"
declare g_LIN0804_DEFIP="192.168.1.4"

declare g_CALC_NETNUM=""

declare g_FIRST_TOKEN=""
declare g_ARG_IPRNG=""
declare g_ARG_IPTST=""

# **************************** basic script functions **************************
# (check_and_install_required) - Function used to check for and install missing packages.
check_and_install_required()
{
  local l_PACKAGE
    # Check if ipcalc command is available
    if command -v ipcalc &>/dev/null; then
        info "required package is already installed."
    else
        # Attempt to install ipcalc
        info "Attempting to install missing package"

        if command -v apt-get &>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y ipcalc
        elif command -v yum &>/dev/null; then
            sudo yum install -y ipcalc
        else
            echo "Unsupported package manager. Please install ipcalc manually."
            return 1
        fi

        # Verify installation
        if command -v ipcalc &>/dev/null; then
            echo "ipcalc has been successfully installed."
        else
            echo "Installation of ipcalc failed. Please install it manually."
            return 1
        fi
    fi
}

# (cleanup_and_exit_with_code) - Function used to properly cleanup the enviornment after an error; the passed value are 1 (error) or 0 (normal).
function cleanup_and_exit_with_code ()
{
  # (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
  l_BOOL='^[0-1]+$'
  if ! [[ $1 =~ $l_BOOL ]]; then
    error "Function: cleanup_and_exit_with_code was passed a value that is out of bounds."
  fi

  # If output was redirected to the logfile during an interactive session, repoint it to the console.
  exec &>$(tty)

  # Error trapping is turned off because we want to handle errors.
  set +e
  trap - EXIT

  exit $1
}

# (display_usage_message_and_bail_out) - Function used to display the usage when an invalid command line option is passed to the script.
function display_usage_message_and_bail_out ()
{
  if [ ! -z "${1+x}" ]; then
    printf "%s: %s\n" "${g_PROGNAME}" "${1}" >&2
  fi

  print_usage >&2
  cleanup_and_exit_with_code 1
}

# (error) - Function for the error catching routine, display an error cleanup and exit the script.
function error ()
{
  echo
  echo -e "${g_RED_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}  ERROR: ${1} - exiting" >&2
  cleanup_and_exit_with_code 1
}

# (help) - Function used to display the scripts usage and command line options.
function help ()
{
  printf "${g_PROGNAME} - ${g_PROGRAM_DESCRIPTION}\n"
  print_usage
}

# (info) - Function for formatted informational messages.
function info ()
{
  echo -e "${g_CYAN_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}   INFO: ${1}" >&2
}

# (internal_consistency_option_checks) - Function used to validate the some of the more obvious configuration file snafus.
function internal_consistency_option_checks ()
{
  while true ; do
    case "$g_FIRST_TOKEN" in
      -i)
        if ((g_ARG_UPDATE)); then
          warning "You cannot set the TCP/IP addresses of the lab enviornment with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
      -u)
        if ((g_ARG_SETIP)); then
          warning "You cannot update this script with any other options set."
          cleanup_and_exit_with_code 1
        fi
        break
        ;;
    esac
  done
}

# (print_usage) - Function used to display the scripts usage and command line options.
function print_usage ()
{
  clear
  script_banner

  cat << EOF

  Usage: ${g_PROGNAME} [-h] [-i|--iprng <a.b.c.d>] [-u|--update] [-v]

  Options:
     -h                     show this help message
     -i --iprng             set TCP/IP network number of the lab enviornment
     -u --update            update the ${g_PROGNAME} script
     -v                     display the version number of ${g_PROGNAME} and
                            exit
EOF
}

# (print_version) - Function used to print the script version.
function print_version ()
{
  clear
  script_banner

  printf "%s\n" "${g_VERSION}"
}

# (process_command_line_options) - Function used to set and validate command line options passed to the script.
function process_command_line_options ()
{
  # (l_TEMP) - Local array used to hold the list of command line arguements passed from the cammandline during script execution.
  local l_TEMP

  # (l_RC) - Local boolean value used to test if any commandline arguements passed from the cammandline during script execution are invalid.
  declare -i l_RC

  # Error trapping is turned off because we want to handle errors.
  set +e
    l_TEMP="$(getopt -o hi:uv --long iprng:update -n "${g_PROGNAME}" -- "${@}")"
    l_RC="${?}"
  set -e

  # Check if any invalid options were passed and display help.
  if ((l_RC!=0)); then
    display_usage_message_and_bail_out
  fi

  # No arguements were passed to the script, display help.
  if [ $# -eq 0 ]; then
    display_usage_message_and_bail_out
  fi

  eval set -- "${l_TEMP}"

  for arg in "${@}"; do
    shift
    case "$arg" in
      --iprng)     set -- "$@" '-i' ;;
      --update)    set -- "$@" '-u' ;;
      *)           set -- "$@" "$arg" ;;
    esac
  done

  # Set the first token for the error message when multiple tokens are passed.
  g_FIRST_TOKEN=${1}

  # Extract the options and their arguments into variables.
  while true ; do
    case "${1}" in
      -h) display_usage_message_and_bail_out ;;
      -i) g_ARG_SETIP=1; g_ARG_IPRNG=${2}; validip "$g_ARG_IPRNG"; shift 2 ;;
      -u) g_ARG_UPDATE=1; shift ;;
      -v) print_version >&2; cleanup_and_exit_with_code 1 ;;
      --) shift; break ;;
    esac
  done
}

# (script_banner) - Function used to display the program banner when it is executed interactively from the CLI.
function script_banner ()
{
  printf "${g_WHITE_TEXT}${g_PROGRAM_NAME}, v${g_VERSION}${g_RESET_ATTS}\n"
  printf "${g_CYAN_TEXT}${g_COPYRIGHT_TEXT}${g_RESET_ATTS}\n"
  printf "${g_CYAN_TEXT}${g_AUTHOR_TEXT} <${g_AUTHOR_EMAIL}>${g_RESET_ATTS}\n"
  printf -- "--------------------------------------------------------------------------------\n\n"

  update
}

# (set_error_trapping) - Function used to enable and disable error handeling, unbound variables and filename pattern matching; the passed value is 1 for enabled or 0 for disabled.
function set_error_trapping ()
{
  # (l_BOOL) - Boolean value used to indicate a value of 0 or 1.
  l_BOOL='^[0-1]+$'
  if ! [[ $1 =~ $l_BOOL ]]; then
    error "Function: set_error_trapping was passed a value that is out of bounds."
  fi

  # (l_TRAP) - Local boolean value used to enable and disable how the script
  # behaves when certain error conditions are met.
  local l_TRAP="${1}"

  if ((l_TRAP == 0)); then
    # Disable errors when a command exits with a non-zero status.
    set +e

    # Disable errors on unbound (undefined) variables.
    set +u

    # Disable allowing filename patterns that match no files to expand to a null
    # string, rather than themselves.
    shopt -u nullglob
  else
    # Enable exiting immediately if a command exits with a non-zero status.
    set -e

    # Enable erroring on unbound (undefined) variables.
    set -u

    # Enable filename patterns that match no files to expand to a null
    # string, rather than themselves.
    shopt -s nullglob
  fi
}

# (trap_cleanup) - Function used to set how we want the script to handle any error conditions it encounters and what we want to do once those error conditions are encountered.
function trap_cleanup ()
{
  trap - SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT
  error "Caught signal"
}
trap trap_cleanup SIGHUP SIGQUIT SIGINT SIGTERM SIGKILL EXIT

# (ver_comp) - Function used to compare the versions of the script update. Passed arguements ($1) old version, ($2) operand (\< \>), ($3) new version.
function ver_comp ()
{
  local x y IFS=. -; set -f
  local l_OLDVER=$1
  local l_OPER=$2
  local l_NEWVER=$3

  printf -v x %08d $l_OLDVER; printf -v y %08d $l_NEWVER
  test $x "$l_OPER" $y
}

# (update) - Function used to check for and update this script from the repository.
function update ()
{
  local l_TMP_FILE
  local l_ABS_PATH
  local l_VERSION

  info " UPDATE: Checking for updates to the $g_PROGRAM_NAME script."

  cd "${g_SCRIPT_PATH}"

  # Test internet access.
  ping -q -c1 8.8.8.8 &>/dev/null
  if [ $? == 1 ]; then
    warning "This script does not have a required network connection to update itself."
    return
  fi

  # Get a new version of the script.
  l_TMP_FILE=$(mktemp -p "" "XXXXX.sh")
  curl -s -L "$g_SCRIPT_URL" > "$l_TMP_FILE"

  l_VERSION=$(grep "^g_VERSION" "$l_TMP_FILE" | awk -F'[="]' '{print $3}')

  # Compare the script versions and update if newer.
  if ver_comp $g_VERSION \< $l_VERSION; then
    if ((g_ARG_UPDATE==1)); then
      info "Updating the $g_PROGRAM_NAME script."

      # Create updater script.
      l_ABS_PATH=$(readlink -f "$g_SCRIPT_LOCATION")

      printf '#!/bin/bash\n\n' >> updater.sh
      printf "cp \"$l_TMP_FILE\" \"$l_ABS_PATH\"\n" >> updater.sh
      printf "rm $g_SCRIPT_PATH/updater.sh" >> updater.sh

      chmod +x updater.sh
      chmod 770 "$l_TMP_FILE"

      if [ $(getent group labuser) ]; then
        chown root:labuser "$l_TMP_FILE"
      else
        chown root:root "$l_TMP_FILE"
      fi

      exec /bin/bash "$g_SCRIPT_PATH/updater.sh"
    fi

    if ((g_ARG_UPDATE==0)); then
      info "There is a new version v$l_VERSION of the $g_PROGRAM_NAME script available.\n            To upgrade please type \"$g_PROGRAM_NAME -u\" at the command prompt.\n\n"
    else
      info "You are running the current version of this script.\n\n"
    fi
  fi

  rm -f "$l_TMP_FILE"
}

# (warning) - Function for formatted warning messages.
function warning ()
{
  echo -e "${g_YELLOW_TEXT}${g_PREFIXSTRING}${g_RESET_ATTS}WARNING: ${1}" >&2
}
# **************************** basic script functions **************************

# ************************ begin script specific functions *********************
# (increment_ip) - A function that will increment the network number passed ($1) by the second arguement ($2).
function increment_ip ()
{
  l_RNG='^[1-6]+$'
  if ! [[ $2 =~ $l_RNG ]]; then
    error "Function: increment_ip was passed a value that is out of bounds."
  fi

  local l_NETNUM="$1"
  local l_INCREMENT="$2"

  local l_LAST_OCTET=""
  local l_INC_LAST_OCTET=""
  local l_UPDATED_IP=""

  # Extract the last octet from the calculated 
  l_LAST_OCTET=$(echo $l_NETNUM | awk -F'.' '{print $4}')

  # Increment the last octet
  l_INC_LAST_OCTET=$((l_LAST_OCTET + $l_INCREMENT))

  # Check for an overflow where the incremented octet is greater than 255, if so then error.
  if [ $l_INC_LAST_OCTET -gt 255 ]; then
      error "  Overflow: Incrementing the last octet exceeds 255."
  fi

  # Update the last octet with the incremented value.
  l_UPDATED_IP=$(echo $g_CALC_NETNUM | awk -F'.' -v var="$l_INC_LAST_OCTET" '{OFS=".";$4=var;print}')

	# Return value to calling function.
	echo "$l_UPDATED_IP"
}

# (install_package) - Install software packages. Passed arguements ($1) package name.
function install_package ()
{
  local l_package="$1"

  # Install packages and report error conditions as warning.
  info "    Installing the $l_package package(s)."
  apt -y install $l_package -qq &>/dev/null
  if [ $? -ne 0 ]; then
    warning "The $l_package package installation failed with an error condition."
  fi
}

# (ping_and_report) - Ping a lab host to ensure that it is up and is responding to its default ip address. Passed arguements ($1) ip address.
function ping_and_report ()
{
  local l_IPADDRESS=$1

  if ping -c 3 "$l_IPADDRESS" &>/dev/null; then
      return 0
  else
      return 1
  fi
}

# (validip) - Check the validity of an IP address passed to the script. Passed arguements ($1) ip address or range.
function validip ()
{
  local l_IPADDRESS="$1"
  local l_NETWORK="/29"
  local l_CALC_NETRNG=""

  # Strip CIDR notation if present.
  l_IPADDRESS=$(echo $l_IPADDRESS | cut -d'/' -f1)

  info "VALIDATING: Validating the network number address passed from the command line."
  if [[ $l_IPADDRESS =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
    # Validate standard IP address format.
    IFS='.' read -r -a octets <<< "$l_IPADDRESS"

    # Check if each octet is within the valid range (0-255).
    valid=true
    for octet in "${octets[@]}"; do
      if [ "$octet" -lt 0 ] || [ "$octet" -gt 255 ]; then
        valid=false
        break
      fi
    done

    if [ "$valid" = true ]; then
      # Check if the IP address entered is a valid network number.
      l_CALC_NETRNG=$(ipcalc -n -b $l_IPADDRESS$l_NETWORK | grep Network | awk '{print $2}')

      if [ "$l_IPADDRESS$l_NETWORK" == "$l_CALC_NETRNG" ]; then
          info "  A valid network number was entered."
          g_CALC_NETNUM=$(echo $l_CALC_NETRNG | cut -d'/' -f1)
      else
          error "  The entered network number address is not a valid starting network number."
      fi
    else
      error "  The entered network number address format was out of range."
    fi
  else
    error "  The network number address was entered in an incorrect format."
  fi
}

# (settcpip) - Function for shelling into each vm changing then applying the new ip addresses.
function settcpip ()
{
  local l_KALI_ETH0=""
  local l_KALI_ETH1=""

  ## NEW IP ADDRESSES FOR LAB ENVIORNMENT
  local l_KALI_NEWIP=$(increment_ip $g_CALC_NETNUM 1)
  local l_WIN2K8_NEWIP=$(increment_ip $g_CALC_NETNUM 2)
  local l_LIN1404_NEWIP=$(increment_ip $g_CALC_NETNUM 3)
  local l_LIN0804_NEWIP=$(increment_ip $g_CALC_NETNUM 4)

  local l_KALI_RESP=""
  local l_WIN2K8_RESP=""
  local l_LIN1404_RESP=""
  local l_LIN0804_RESP=""

  info "SETTING: Setting the TCPIP addresses for the private network lab enviornment."

  ## PRE-ENVIRONMENT CHECK
    # Cleanup cloned environment.
    info "  Cleaning up from the cloned environment..."

    nmcli connection | grep -q 'Wired connection 1'
    if [ $? == 0 ]; then
      info "    Removing cloned eth0 network adapter..."
      nmcli connection delete "Wired connection 1" &>/dev/null
    fi

    nmcli connection | grep -q 'Wired connection 2'
    if [ $? == 0 ]; then
      info "    Removing cloned eth1 network adapter..."
      nmcli connection delete "Wired connection 2" &>/dev/null
    fi

    nmcli connection | grep -q 'Public Network'
    if [ $? == 0 ]; then
      info "    Removing the orphaned eth0 network adapter..."
      nmcli connection delete "Public Network" &>/dev/null

      info "    Creating new 'Public Network' adapter on eth0..."
      nmcli connection add con-name "Public Network" type ethernet ifname eth0 ipv4.method auto &>/dev/null
      nmcli connection up id "Public Network" &>/dev/null
    fi

    nmcli connection | grep -q 'CIT-254-ISOLATED'
    if [ $? == 0 ]; then
      info "    Removing the orphaned eth1 network adapter..."
      nmcli connection delete "CIT-254-ISOLATED" &>/dev/null

      info "    Creating new 'Public Network' adapter on eth0..."
      nmcli con add con-name "CIT-254-ISOLATED" type ethernet ifname eth1 ipv4.method manual ipv4.address 192.168.1.1/29 &>/dev/null
      nmcli connection up id "CIT-254-ISOLATED" &>/dev/null
    fi

    info "  Ensuring each lab host is up and running."
    if [[ "$l_KALI_ETH1" == "$g_KALI_DEFIP" ]]; then
      # Check WIN2K8 is available.
      l_WIN2K8_RESP=$(ping_and_report $g_WIN2K8_DEFIP)
      if [[ $l_WIN2K8_RESP -ne 0 ]]; then
        warning "    The Metasploitable3 (Windows 2008R2) VM is not responding."
      else
        info "   The Metasploitable3 (Windows 2008R2) VM is responding."
      fi

      # Check Metasploitable3 (Linux) is available.
      l_LIN1404_RESP=$(ping_and_report $g_LIN1404_DEFIP)
      if [[ $l_LIN1404_RESP -ne 0 ]]; then
        warning "    The Metasploitable3 (Ubuntu 14.04) VM is not responding."
      else
        info "    The Metasploitable3 (Ubuntu 14.04) VM is responding."
      fi

      # Check Metaspliotable2 (Linux) is available.
      l_LIN0804_RESP=$(ping_and_report $g_LIN0804_DEFIP)
      if [[ $l_LIN0804_RESP -ne 0 ]]; then
        warning "    The Metasploitable2 (Ubuntu 08.04) VM is not responding."
      else
        info "    The Metasploitable2 (Ubuntu 08.04) VM is responding."
      fi

      # Any host that is unavailable will cause script to fail, exit with error.
      if [[ $l_WIN2K8_RESP -ne 0 ]] || [[ $l_LIN1404_RESP -ne 0 ]] || [[ $l_LIN0804_RESP -ne 0 ]]; then
        error "    One or more of the josts in the lab enviornment are unresponsive. Please ensure each host is up prior to running this script."
      else
        info "    The lab host enviornment is up and ready to configure."
      fi
    fi
  ## PRE-ENVIORNMENT CHECK

  ## Metasploitable3 (Microsoft Windows)
    info "  Updating the Metasploitable3 (Microsoft Windows) VM networking."
    sleep 5s

    info "    Running TCPIP update script on Metasploitable3 (Microsoft Windows)."
    sshpass -pvagrant ssh -f -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" vagrant@$g_WIN2K8_DEFIP 'netsh interface ip set address name="CIT-254-ISOLATED" static '"$l_WIN2K8_NEWIP"' 255.255.255.248'
  ## Metasploitable3 (Microsoft Windows)

  ## Metasploitable3 (Linux)
    info "  Updating the Metasploitable3 (Linux) VM networking."
    sleep 5s

    # Cleanup incase of a borked run.
    if [[ -f "${g_SCRIPT_PATH}/bootstrap_lin1404.sh" ]]; then
      info "    Cleaning up messy environment, removing bootstrap_lin1404.sh script."
      rm "${g_SCRIPT_PATH}/bootstrap_lin1404.sh"
    fi

    # Cleanup incase of a borked run.
    if [[ -f "${g_SCRIPT_PATH}/updater_lin1404.sh" ]]; then
      info "    Cleaning up messy environment, removing updater_lin1404.sh script."
      rm "${g_SCRIPT_PATH}/updater_lin1404.sh"
    fi

    # Create bootstrap script that will call the updater script.
    info "    Creating bootstrap script."
    printf '#!/bin/bash\n\n' >> bootstrap_lin1404.sh
    printf "echo vagrant | sudo -S nohup /home/vagrant/updater.sh &\n" >> bootstrap_lin1404.sh
    printf "rm /home/vagrant/bootstrap.sh\n" >> bootstrap_lin1404.sh
    chmod +x bootstrap_lin1404.sh

    # Create the updater script based on default ip address and new onr entered.
    info "    Creating TCPIP address updater script."
    printf '#!/bin/bash\n\n' >> updater_lin1404.sh
    printf "sleep 10s\n\n" >> updater_lin1404.sh
    printf "sed -i -e 's/$g_LIN1404_DEFIP/$l_LIN1404_NEWIP/' /etc/network/interfaces\n" >> updater_lin1404.sh
    printf "ifdown eth0 && ifup eth0\n" >> updater_lin1404.sh
    printf "rm /home/vagrant/updater.sh\n" >> updater_lin1404.sh
    chmod +x updater_lin1404.sh

    # Copy scripts to the Metasploitable3 (Linux) VM.
    sshpass -pvagrant scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" updater_lin1404.sh vagrant@$g_LIN1404_DEFIP:/home/vagrant/updater.sh
    sshpass -pvagrant scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" bootstrap_lin1404.sh vagrant@$g_LIN1404_DEFIP:/home/vagrant/bootstrap.sh

    # Run the SSH script
    info "    Running TCPIP update script on Metasploitable3 (Linux)."
    sshpass -pvagrant ssh -f -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" vagrant@$g_LIN1404_DEFIP '/bin/bash /home/vagrant/bootstrap.sh'
    if [ $? -eq 0 ]; then
      info "    TCPIP address updater script ran successfully."
    fi

    # Cleanup after run.
    if [[ -f "${g_SCRIPT_PATH}/bootstrap_lin1404.sh" ]]; then
      info "    Cleaning up removing bootstrap_lin1404.sh script."
      rm "${g_SCRIPT_PATH}/bootstrap_lin1404.sh"
    fi

    if [[ -f "${g_SCRIPT_PATH}/updater_lin1404.sh" ]]; then
      info "    Cleaning up removing updater_lin1404.sh script."
      rm "${g_SCRIPT_PATH}/updater_lin1404.sh"
    fi
  ## Metasploitable3 (Linux)

  ## Metasploitable2 (Linux)
    info "  Updating the Metasploitable2 VM networking."
    sleep 5s

    # Cleanup incase of a borked run.
    if [[ -f "${g_SCRIPT_PATH}/bootstrap_lin0804.sh" ]]; then
      info "    Cleaning up messy environment, removing bootstrap_lin0804.sh script."
      rm "${g_SCRIPT_PATH}/bootstrap_lin0804.sh"
    fi

    # Cleanup incase of a borked run.
    if [[ -f "${g_SCRIPT_PATH}/updater_lin0804.sh" ]]; then
      info "    Cleaning up messy environment, removing updater_lin0804.sh script."
      rm "${g_SCRIPT_PATH}/updater_lin0804.sh"
    fi

    # Create bootstrap script that will call the updater script.
    info "    Creating bootstrap script."
    printf '#!/bin/bash\n\n' >> bootstrap_lin0804.sh
    printf "echo msfadmin | sudo -S nohup /home/msfadmin/updater.sh &\n" >> bootstrap_lin0804.sh
    printf "rm /home/msfadmin/bootstrap.sh\n" >> bootstrap_lin0804.sh
    chmod +x bootstrap_lin0804.sh

    # Create the updater script based on default ip address and new onr entered.
    info "    Creating TCPIP address updater script."
    printf '#!/bin/bash\n\n' >> updater_lin0804.sh
    printf "sleep 10s\n\n" >> updater_lin0804.sh
    printf "sed -i -e 's/$g_LIN0804_DEFIP/$l_LIN0804_NEWIP/' /etc/network/interfaces\n" >> updater_lin0804.sh
    printf "ifdown eth0 && ifup eth0\n" >> updater_lin0804.sh
    printf "rm /home/msfadmin/updater.sh\n" >> updater_lin0804.sh
    chmod +x updater_lin0804.sh

    # Copy scripts to the Metasploitable2 VM.
    sshpass -pmsfadmin scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" updater_lin0804.sh msfadmin@$g_LIN0804_DEFIP:/home/msfadmin/updater.sh
    sshpass -pmsfadmin scp -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" bootstrap_lin0804.sh msfadmin@$g_LIN0804_DEFIP:/home/msfadmin/bootstrap.sh

    # Run the SSH script
    info "    Running TCPIP update script on Metasploitable2."
    sshpass -pmsfadmin ssh -f -o "StrictHostKeyChecking no" -o "HostKeyAlgorithms=+ssh-dss" msfadmin@$g_LIN0804_DEFIP '/bin/bash /home/msfadmin/bootstrap.sh'
    if [ $? -eq 0 ]; then
      info "    TCPIP address updater script ran successfully."
    fi

    # Cleanup after run.
    if [[ -f "${g_SCRIPT_PATH}/bootstrap_lin0804.sh" ]]; then
      info "    Cleaning up removing bootstrap_lin0804.sh script."
      rm "${g_SCRIPT_PATH}/bootstrap_lin0804.sh"
    fi

    if [[ -f "${g_SCRIPT_PATH}/updater_lin0804.sh" ]]; then
      info "    Cleaning up removing updater_lin0804.sh script."
      rm "${g_SCRIPT_PATH}/updater_lin0804.sh"
    fi
  ## Metasploitable2 (Linux)

  ## KALI
   info "  Updating Kali Linux (eth1) VM networking."
   nmcli connection down "CIT-254-ISOLATED" > /dev/nul
   nmcli connection modify "CIT-254-ISOLATED" ipv4.addresses $l_KALI_NEWIP/29
   nmcli connection up "CIT-254-ISOLATED" > /dev/nul
  ## KALI

  ## POST-ENVIORNMENT CHECK
    # Check KALI is available.
    l_KALI_RESP=$(ping_and_report $l_KALI_NEWIP)
    if [[ $l_KALI_RESP -ne 0 ]]; then
      warning "    The Kali Linux VM is not responding to its new IP address."
    else
      info "    The Kali Linux VM is responding to its new IP address."
    fi

    # Check WIN2K8 is available.
    l_WIN2K8_RESP=$(ping_and_report $l_WIN2K8_NEWIP)
    if [[ $l_WIN2K8_RESP -ne 0 ]]; then
      warning "    The Metasploitable3 (Windows 2008R2) is not responding to its new IP address."
    else
      info "    The Metasploitable3 (Windows 2008R2) is responding  to its new IP address."
    fi

    # Check Metasploitable3 (Linux) is available.
    l_LIN1404_RESP=$(ping_and_report $l_LIN1404_NEWIP)
    if [[ $l_LIN1404_RESP -ne 0 ]]; then
      warning "    The Metasploitable3 (Ubuntu 14.04) is not responding to its new IP address."
    else
      info "    The Metasploitable3 (Ubuntu 14.04) is responding to its new IP address."
    fi

    # Check Metaspliotable2 (Linux) is available.
    l_LIN0804_RESP=$(ping_and_report $l_LIN0804_NEWIP)
    if [[ $l_LIN0804_RESP -ne 0 ]]; then
      warning "    The Metasploitable2 (Ubuntu 08.04) is not responding to its new IP address."
    else
      info "    The Metasploitable2 (Ubuntu 08.04) is responding to its new IP address."
    fi

    # Any host that is unavailable will cause script to fail, exit with error.
    if [[ $l_KALI_RESP -ne 0 ]] || [[ $l_WIN2K8_RESP -ne 0 ]] || [[ $l_LIN1404_RESP -ne 0 ]] || [[ $l_LIN0804_RESP -ne 0 ]]; then
      warning "    One or more of the hosts in the lab enviornment are unresponsive to their new ip addresses."
    else
      info "    The lab host enviornment has successfully been reconfigured."
    fi
  ## POST-ENVIORNMENT CHECK

  ## WRITE LAB FILE
    printf "This is Kali Linux (2023.4)\n\nThis virtual machine (VM) is part of a lab environment that includes three isolated virtual machines that are vulnerable and designed to teach you the tools used to attack and defend networks. Using this VM, you can conduct security training, test security tools, and practice standard penetration testing techniques.\n\n" >> /home/labuser/Desktop/Lab-Readme.txt
    printf "This lab enviornment is setup with the following IP addresses:\n" >> /home/labuser/Desktop/Lab-Readme.txt
    printf "  Kali Linux (2023.4) (This VM)      eth0: DHCP\n"                >> /home/labuser/Desktop/Lab-Readme.txt
    printf "                                     eth1: $l_KALI_NEWIP/29\n\n"  >> /home/labuser/Desktop/Lab-Readme.txt
    printf "  Metasploitable 3 (Windows 2008R2)  nic0: $l_WIN2K8_NEWIP/29\n"  >> /home/labuser/Desktop/Lab-Readme.txt
    printf "  Metasploitable 3 (Ubuntu 14.04)    eth0: $l_LIN1404_NEWIP/29\n" >> /home/labuser/Desktop/Lab-Readme.txt
    printf "  Metasploitable 2 (Ubuntu 08.04)    eth0: $l_LIN0804_NEWIP/29\n" >> /home/labuser/Desktop/Lab-Readme.txt
  ## WRITE LAB FILE
}
# ************************* end script specific functions **********************

# *************************** begin of script proper ***************************
process_command_line_options "${@}"
internal_consistency_option_checks

# ROOT FUNCTION, ARE WE ROOT?
if [ $EUID -ne 0 ]; then
  warning "This option can only be run using administrative permissions."
  cleanup_and_exit_with_code 1
else
  # Check for and install the ipcalc package required for this script.
  if command -v ipcalc &>/dev/null; then
    echo "ipcalc is already installed."
  else
    install_package ipcalc
  fi

  # Check for and install the sshpass package required for this script.
  if command -v sshpass &>/dev/null; then
    echo "sshpass is already installed."
  else
    install_package sshpass
  fi

  # Only clear screen and present script banner when gAFI is zero.
  if ! ((g_ARG_FINISH_INSTALL==1)); then
    clear
    script_banner
  fi

  # SET TCP/IP OF LAB ENVIORNMENT
  if ((g_ARG_SETIP==1)); then
    settcpip
  fi

  # UPDATE SCRIPT
  if ((g_ARG_UPDATE==1)); then
    update
  fi
fi

cleanup_and_exit_with_code 0
# **************************** end of script proper ****************************